import streamlit as st
import plotly.graph_objects as go
from plotly import graph_objs as go
import base64
from datetime import datetime

if 'current_tab' not in st.session_state:
    st.session_state.current_tab = "Descriptive Analysis"
if 'uploaded_file' not in st.session_state:
    st.session_state.uploaded_file = None
if 'df' not in st.session_state:
    st.session_state.df = None
if 'nested_tab' not in st.session_state:
    st.session_state.nested_tab = "Various Graphics"
if 'report_data' not in st.session_state:
    st.session_state['report_data'] = []
if 'last_fig' not in st.session_state:
    st.session_state['last_fig'] = None
if 'fig_width' not in st.session_state:
    st.session_state['fig_width'] = 1000
if 'fig_height' not in st.session_state:
    st.session_state['fig_height'] = 600  
if 'description' not in st.session_state:
    st.session_state['description'] = ""
if 'num_factors' not in st.session_state:
    st.session_state.num_factors = 2
if 'factor_items' not in st.session_state:
    st.session_state.factor_items = {f'Factor {i+1}': [] for i in range(st.session_state.num_factors)}

if 'models' not in st.session_state:
    st.session_state.models = []
if 'last_selected_factor' not in st.session_state:
    st.session_state.last_selected_factor = None
def generate_html_report(report_data):
    html_content = '''
    <html>
    <head>
        <style>
            body {{
                font-family: Arial, sans-serif;
                background-color: #f0f8ff;
                color: #333;
                padding: 20px;
            }}
            .header {{
                text-align: center;
                padding: 10px;
                background-color: #0073e6;
                color: white;
                border-radius: 10px;
            }}
            .report-title {{
                text-align: center;
                font-size: 24px;
                color: #0073e6;
                margin-top: 20px;
                margin-bottom: 20px;
            }}
            .toc {{
                border: 1px solid #0073e6;
                border-radius: 10px;
                padding: 10px;
                background-color: #e6f2ff;
            }}
            .toc h2 {{
                text-align: center;
                color: #0073e6;
            }}
            .toc ul {{
                list-style: none;
                padding: 0;
            }}
            .toc li {{
                margin: 10px 0;
            }}
            .figure {{
                border: 1px solid #0073e6;
                border-radius: 10px;
                padding: 10px;
                background-color: white;
                margin-top: 20px;
                text-align: center;
            }}
            .figure img {{
                max-width: 100%;
                height: auto;
                border: 1px solid #0073e6;
                border-radius: 10px;
            }}
            .description {{
                margin-top: 10px;
                font-style: italic;
                color: #555;
            }}
            .footer {{
                text-align: center;
                margin-top: 20px;
                padding: 10px;
                background-color: #0073e6;
                color: white;
                border-radius: 10px;
            }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>Descriptive Analysis Report</h1>
            <p>Generated at {date}</p>
        </div>
        <div class="report-title">Content Table</div>
        <div class="toc">
            <h2>Index</h2>
            <ul>
                {toc_items}
            </ul>
        </div>
        {figures}
        <div class="footer">
            <p>Autogenerated Report</p>
        </div>
    </body>
    </html>
    '''
    
    toc_items = ''
    figures = ''
    for i, fig_data in enumerate(report_data):
        fig = go.Figure(fig_data['figure'])
        fig.update_layout(width=1800, height=fig_data['height'])
        img_bytes = fig.to_image(format="png")
        img_base64 = base64.b64encode(img_bytes).decode("utf-8")
        toc_items += f'<li><a href="#figure{i+1}">Chart {i+1}</a></li>'
        description_html = f'<div class="description">{fig_data["description"]}</div>' if fig_data["description"] else ''
        figures += f'''
        <div class="figure" id="figure{i+1}">
            <h2>Chart {i+1}</h2>
            <img src="data:image/png;base64,{img_base64}" />
            {description_html}
        </div>
        '''
    
    return html_content.format(
        date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        toc_items=toc_items,
        figures=figures
    )

st.set_page_config(page_title="Generate Report", page_icon="ðŸ“‚", layout="centered")

st.subheader("ðŸ“‚ Download Report")
if st.button("Generate Report"):
    if st.session_state['report_data']:
        html_report = generate_html_report(st.session_state['report_data'])
        b64 = base64.b64encode(html_report.encode()).decode()
        href = f'<a href="data:text/html;base64,{b64}" download="report.html">Download Report</a>'
        st.markdown(href, unsafe_allow_html=True)
    else:
        st.warning("No graphs to generate report")